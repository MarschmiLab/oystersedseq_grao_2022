library("tidyr")
library("dplyr")
updated_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
View(updated_data)
updated_data$New.Sample.ID
ggplot(data = updated_data, aes(x="New.Sample.ID", y="Lat")) + geom_point()
library("tidyr")
library("dplyr")
library("ggplot2")
ggplot(data = updated_data, aes(x="New.Sample.ID", y="Lat")) + geom_point()
ggplot(data = updated_data, aes(x="Lat", y="Long")) + geom_point()
updated_data <- updated_data[-6]
updated_data
View(updated_data)
names(updated_data)[names(updated_data) == 'New.Sample.ID'] <- 'Sample.ID'
View(updated_data)
View(updated_data)
View(updated_data)
library("tidyr")
library("dplyr")
updated_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
updated_data <- updated_data[-6]
names(updated_data)[names(updated_data) == 'New.Sample.ID'] <- 'Sample.ID'
View(updated_data)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
View(official_data)
View(updated_data)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
View(official_data)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
library("tidyr")
library("dplyr")
View(official_data)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
library("devtools")
library("dada2")
path <- "~/Documents/git_repos/oysterbedseq_grao_2022/DADA2_tutorial/Miseq_SOP"
list.files(path)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
#forward reads
plotQualityProfile(fnFs[1:2])
#reverse reads
plotQualityProfile(fnRs[1:2])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen = c(240,160),
maxN = 0, maxEE = c(2,2), truncQ = 2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE)
head(out)
errF <- learnErrors(filtFs, multithread = TRUE)
errR <- learnErrors(filtRs, miltithread=TRUE)
plotErrors(errF, nominalQ = TRUE)
dadaFs <- dada(filtFs, err = errF, multithread = TRUE)
dadaRs <- dada(filtRs, err = errR, multithread = TRUE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose = TRUE)
#inspection just for the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method = "consensus", multithread=TRUE, verbose = TRUE)
dim(seqtab.nochim)
#frequency
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
taxa <- assignTaxonomy(seqtab.nochim, "~/Documents/git_repos/oysterbedseq_grao_2022/DADA2_tutorial/MiSeq_SOP/silva_nr_v132_train_set.fa")
taxa.print <- taxa
rownames(taxa.print) <- NULL
head(taxa.print)
unqs.mock <- seqtab.nochim["Mock",]
unqs.mock <- sort(unqs.mock[unqs.mock>0], decreasing = TRUE)
cat("DADA2 inferred", length(unqs.mock), "sample siquences present in the mock community.\n")
mock.ref <- getSequences(file.path(path, "HMP_MOCK.v35.fasta"))
match.ref <- sum(sapply(names(unqs.mock), function(x) any(grepl(x, mock.ref))))
cat("Of those,", sum(match.ref), "were exact matches to the expected reference sequences.\n")
install.packages("phyloseq")
library(phyloseq); packageVersion("phyloseq")
library(Biostrings); packageVersion("Biostrings")
library(ggplot2); packageVersion("ggplot2")
theme_set(theme_bw())
samples.out <- rownames(seqtab.nochim)
subject <- sapply(strsplit(samples.out, "D"), `[`, 1)
gender <- substr(subject,1,1)
subject <- substr(subject,2,999)
day <- as.integer(sapply(strsplit(samples.out, "D"), `[`, 2))
samdf <- data.frame(Subject=subject, Gender=gender, Day=day)
samdf$When <- "Early"
samdf$When[samdf$Day>100] <- "Late"
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
ps <- prune_samples(sample_names(ps) != "Mock", ps)
dna <- Biostrings::DNAStringSet(taxa_names(ps))
names(dna) <- taxa_names(ps)
ps <- merge_phyloseq(ps, dna)
taxa_names(ps) <- paste0("ASV", seq(ntaxa(ps)))
ps
plot_richness(ps, x="Day", measures = c("Shannon", "Simpson"), color = "When")
plot_richness(ps, x="Day", measures = c("Shannon", "Simpson"), color = "When")
#ordinate
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method = "NMDS", distance = "bray")
plot_richness(ps, x="Day", measures = c("Shannon", "Simpson"), color = "When")
#ordinate
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method = "NMDS", distance = "bray")
plot_ordination(ps.prop, ord.nmds.bray, color = "When", title = "Bray NMDS")
plot_richness(ps, x="Day", measures = c("Shannon", "Simpson"), color = "When")
#ordination
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method = "NMDS", distance = "bray")
plot_ordination(ps.prop, ord.nmds.bray, color = "When", title = "Bray NMDS")
#bar plot
top20 <- names(sort(taxa_sums(ps), decreasing = TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Day", fill = "Family") + facet_wrap(~When, scales = "free_x")
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
View(updated_data)
View(official_data)
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
View(official_data)
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
View(official_data)
setwd("~/Documents/git_repos/oystersedseq_grao_2022/data")
library("tidyr")
library("dplyr")
official_data <- read.csv("updated_oip copy.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
library("tidyr")
library("dplyr")
sediment_data <- read.csv("updated_oip copy.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
View(sediment_data)
library("ggplot2")
sediment_data <- read.csv("updated_oip copy.csv", stringsAsFactors = TRUE)
#seasons according to the northern hemisphere:
#spring: March 1 - May 31
#summer: June 1 - August 31
#fall: September 1 - November 30
#winter: December 1 - February 28/29
#https://www.timeanddate.com/calendar/aboutseasons.html
View(sediment_data)
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) +
geom_point()
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = continent)) +
geom_point()
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) +
geom_point()
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) + geom_point() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library("ggplot2")
DNAconc <- ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) + geom_point() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library("ggplot2")
DNAconc <- ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) + geom_point() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) + geom_point() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) + geom_point() + geom_boxplot()+ labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) + geom_boxplot() + geom_point() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL, color = Treatment)) + geom_point() + geom_boxplot() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_point(color = Treatment) + geom_boxplot() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_point(mapping = aes(color=Treatment)) + geom_boxplot() + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_point(mapping = aes(color=Treatment)) + geom_jitter() + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme_minimal + theme(axis.text.x = element_text(angle = 90, hjust = 1))
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_point(mapping = aes(color=Treatment)) + geom_jitter() + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter() + geom_point(mapping = aes(color=Treatment))  + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter() + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_classic()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter() + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_get()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter() + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_dark()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter() + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_dark(alpha = 0.3)
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter() + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_minimal()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter(mapping = aes(color=Treatment)) + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_minimal()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter(mapping = aes(color=Treatment)) + geom_point(mapping = aes(color=Treatment, shape = Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_minimal()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter(mapping = aes(color=Treatment, shape = Treatment)) + geom_point(mapping = aes(color=Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_minimal()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
library("ggplot2")
ggplot(data = sediment_data, mapping = aes(x = Location, y = DNA.Concentration.ng.uL)) + geom_jitter(mapping = aes(color=Treatment, shape = Treatment)) + geom_point(mapping = aes(color=Treatment, shape = Treatment)) + geom_boxplot(alpha = 0.3, mapping = aes(color=Treatment)) + labs(
x = "Location",
y = "DNA Concentration (ng/uL)",
title = "Figure 1: DNA Concentration in Oyster and Bare Sediment Samples",
color = "Treatment"
) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + theme_minimal()
#ggsave(filename = "data/DNAConcentration.png", plot = DNAconc, width = 12, height = 10, dpi = 300, units = "cm")
